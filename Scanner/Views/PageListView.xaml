<Page
    x:Class="Scanner.Views.PageListView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:Scanner.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    xmlns:muxc="using:Microsoft.UI.Xaml.Controls"
    xmlns:viewModels="using:Scanner.ViewModels"
    xmlns:converters="using:Scanner.Views.Converters"
    xmlns:scanner="using:Scanner"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:controls="using:Microsoft.Toolkit.Uwp.UI.Controls"
    Background="Transparent"
    d:DesignWidth="350"
    d:DesignHeight="600"
    
    Loaded="Page_Loaded">

    <Page.DataContext>
        <viewModels:PageListViewModel x:Name="ViewModel"/>
    </Page.DataContext>

    <interactivity:Interaction.Behaviors>
        <core:EventTriggerBehavior EventName="Unloaded">
            <core:InvokeCommandAction Command="{x:Bind ViewModel.DisposeCommand}"/>
        </core:EventTriggerBehavior>
    </interactivity:Interaction.Behaviors>


    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - - - - - -  RESOURCES  - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="..\StylesDictionary.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <!-- XAML Converters -->
            <converters:NotNullBoolConverter x:Key="NotNullBoolConverter"/>
            <converters:BoolVisibilityConverter x:Key="BoolVisibilityConverter"/>
            <converters:NegativeBoolConverter x:Key="NegativeBoolConverter"/>
            <converters:NegativeBoolVisibilityConverter x:Key="NegativeBoolVisibilityConverter"/>
            <converters:VisibilityOpacityConverter x:Key="VisibilityOpacityConverter"/>

            <Storyboard x:Name="StoryboardToolbarIconDoneStart" Completed="StoryboardToolbarIconDoneStart_Completed" Duration="0:0:1.8">
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleX)"
                                 To="0.0" Duration="0:0:0.15"/>
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleY)"
                                 To="0.0" Duration="0:0:0.15"/>
                <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                 To="0.0" Duration="0:0:0.15" BeginTime="0:0:0"/>
                <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                 To="1.0" Duration="0:0:0"/>
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleX)"
                                 To="1.0" Duration="0:0:0.15" BeginTime="0:0:0.15">
                    <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseOut"/>
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleY)"
                                 To="1.0" Duration="0:0:0.15" BeginTime="0:0:0.15">
                    <DoubleAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseOut"/>
                    </DoubleAnimation.EasingFunction>
                </DoubleAnimation>
            </Storyboard>

            <Storyboard x:Name="StoryboardToolbarIconDoneFinish">
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleX)"
                                 To="1.0" Duration="0:0:0" BeginTime="0:0:0"/>
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleY)"
                                 To="1.0" Duration="0:0:0" BeginTime="0:0:0"/>
                <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                 To="1.0" Duration="0:0:0.15" BeginTime="0:0:0.15"/>
                <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                 To="0.0" Duration="0:0:0.15" BeginTime="0:0:0"/>
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleX)"
                                 To="0.0" Duration="0:0:0" BeginTime="0:0:0.15"/>
                <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(CompositeTransform.ScaleY)"
                                 To="0.0" Duration="0:0:0" BeginTime="0:0:0.15"/>
            </Storyboard>
        </ResourceDictionary>
    </Page.Resources>

    <!-- - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - - - - - -  PAGE CONTENT  - - - - - - - - - - - - - - - - -->
    <!-- - - - - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - - - - - -->
    <Grid>
        <!-- VisualStates -->
        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup>
                <VisualState x:Name="NormalState">
                    <Storyboard>
                        
                    </Storyboard>

                    <VisualState.Setters>

                    </VisualState.Setters>
                </VisualState>

                <VisualState x:Name="DisabledState">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsScanRunning, Mode=OneWay}"/>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsScanResultChanging, Mode=OneWay}"/>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsEditorEditing, Mode=OneWay}"/>
                    </VisualState.StateTriggers>
                    
                    <Storyboard>

                    </Storyboard>

                    <VisualState.Setters>
                        <Setter Target="GridViewPages.IsEnabled" Value="False"/>
                        <Setter Target="FrameToolbar.IsEnabled" Value="False"/>
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <Grid.RowDefinitions>
            <RowDefinition Height="48"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <!-- Toolbar -->
        <Grid Grid.Row="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{ThemeResource NavigationViewContentBackground}" BorderBrush="{ThemeResource NavigationViewContentGridBorderBrush}" BorderThickness="0,0,0,1" CornerRadius="8,8,0,0">
            <Frame x:Name="FrameToolbar">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <StackPanel.Transitions>
                        <TransitionCollection>
                            <RepositionThemeTransition/>
                        </TransitionCollection>
                    </StackPanel.Transitions>

                    <AppBarToggleButton x:Name="AppBarToggleButtonSelect" x:Uid="ButtonManageSelect" LabelPosition="Collapsed" Style="{StaticResource AppBarToggleButtonStyleCompact}" IsEnabled="{x:Bind ViewModel.ScanResult, Mode=OneWay, Converter={StaticResource NotNullBoolConverter}}" Unchecked="AppBarToggleButtonSelect_Unchecked">
                        <AppBarToggleButton.Icon>
                            <FontIcon Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE762;"/>
                        </AppBarToggleButton.Icon>
                    </AppBarToggleButton>
                    <AppBarSeparator Visibility="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" Opacity="{x:Bind Visibility, Mode=OneWay, Converter={StaticResource VisibilityOpacityConverter}}">
                        <AppBarSeparator.OpacityTransition>
                            <ScalarTransition Duration="0:0:0.3"/>
                        </AppBarSeparator.OpacityTransition>
                    </AppBarSeparator>
                    <AppBarButton x:Name="AppBarButtonRotate" x:Uid="ButtonManageRotate" Command="{x:Bind ViewModel.RotateCommand}" CommandParameter="1" LabelPosition="Collapsed" IsEnabled="{x:Bind ViewModel.SelectedRanges, Mode=OneWay, Converter={StaticResource NotNullBoolConverter}, FallbackValue=False}" Style="{ThemeResource AppBarButtonStyleChevron}" Visibility="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" Opacity="{x:Bind AppBarButtonRotate.Visibility, Mode=OneWay, Converter={StaticResource VisibilityOpacityConverter}}" RightTapped="AppBarButtonRotate_RightTapped">
                        <AppBarButton.OpacityTransition>
                            <ScalarTransition Duration="0:0:0.3"/>
                        </AppBarButton.OpacityTransition>

                        <Grid Padding="0" Margin="0">
                            <FontIcon x:Name="FontIconRotate" Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE7AD;" FontSize="16" RenderTransformOrigin="0.5,0.5">
                                <FontIcon.RenderTransform>
                                    <CompositeTransform ScaleX="1" ScaleY="1"/>
                                </FontIcon.RenderTransform>
                            </FontIcon>
                            <FontIcon x:Name="FontIconRotateDone" Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xEC61;" FontSize="16" RenderTransformOrigin="0.5,0.5">
                                <FontIcon.RenderTransform>
                                    <CompositeTransform ScaleX="0" ScaleY="0"/>
                                </FontIcon.RenderTransform>
                            </FontIcon>
                        </Grid>

                        <FlyoutBase.AttachedFlyout>
                            <MenuFlyout x:Name="MenuFlyoutButtonLeftPaneManageRotate" Placement="Bottom">
                                <MenuFlyoutItem x:Uid="ButtonManageRotate90" FontWeight="SemiBold" Command="{x:Bind ViewModel.RotateCommand}" CommandParameter="1"/>
                                <MenuFlyoutItem x:Uid="ButtonManageRotate180" Command="{x:Bind ViewModel.RotateCommand}" CommandParameter="2"/>
                                <MenuFlyoutItem x:Uid="ButtonManageRotate270" Command="{x:Bind ViewModel.RotateCommand}" CommandParameter="3"/>
                            </MenuFlyout>
                        </FlyoutBase.AttachedFlyout>
                    </AppBarButton>
                    <AppBarButton x:Name="AppBarButtonDelete" x:Uid="ButtonManageDelete" LabelPosition="Collapsed" IsEnabled="{x:Bind ViewModel.SelectedRanges, Mode=OneWay, Converter={StaticResource NotNullBoolConverter}, FallbackValue=False}" Style="{StaticResource AppBarButtonStyleCompact}" Visibility="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" Opacity="{x:Bind AppBarButtonDelete.Visibility, Mode=OneWay, Converter={StaticResource VisibilityOpacityConverter}}" Click="AppBarButtonDelete_Click">
                        <AppBarButton.OpacityTransition>
                            <ScalarTransition Duration="0:0:0.3"/>
                        </AppBarButton.OpacityTransition>

                        <Grid Padding="0" Margin="0">
                            <FontIcon x:Name="FontIconDelete" Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE74D;" FontSize="16" RenderTransformOrigin="0.5,0.5">
                                <FontIcon.RenderTransform>
                                    <CompositeTransform ScaleX="1" ScaleY="1"/>
                                </FontIcon.RenderTransform>
                            </FontIcon>
                            <FontIcon x:Name="FontIconDeleteDone" Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xEC61;" FontSize="16" RenderTransformOrigin="0.5,0.5">
                                <FontIcon.RenderTransform>
                                    <CompositeTransform ScaleX="0" ScaleY="0"/>
                                </FontIcon.RenderTransform>
                            </FontIcon>
                        </Grid>

                        <FlyoutBase.AttachedFlyout>
                            <Flyout x:Name="FlyoutDelete">
                                <Grid MinWidth="250" MaxWidth="250">
                                    <Grid.RowDefinitions>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>

                                    <TextBlock Grid.Row="0" Grid.ColumnSpan="2" Text="Delete" Style="{StaticResource BaseTextBlockStyle}"/>
                                    <TextBlock Grid.Row="1" Grid.ColumnSpan="2" Text="Are you sure you want to delete this?" Style="{StaticResource BodyTextBlockStyle}" Margin="0,0,0,16"/>

                                    <Grid Grid.Row="2">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>

                                        <Button Grid.Column="0" Margin="0,0,3,0" HorizontalAlignment="Stretch" Content="Confirm" Style="{StaticResource AccentButtonStyle}" Command="{x:Bind ViewModel.DeleteCommand}" Click="AppBarButtonDeleteDelete_Click"/>
                                        <Button Grid.Column="1" Margin="3,0,0,0" HorizontalAlignment="Stretch" Content="Cancel" Click="AppBarButtonDeleteCancel_Click"/>
                                    </Grid>
                                </Grid>
                            </Flyout>
                        </FlyoutBase.AttachedFlyout>
                    </AppBarButton>
                    <AppBarButton x:Name="AppBarButtonCopy" x:Uid="ButtonManageCopy" Command="{x:Bind ViewModel.CopyCommand}" LabelPosition="Collapsed" IsEnabled="{x:Bind ViewModel.SelectedRanges, Mode=OneWay, Converter={StaticResource NotNullBoolConverter}, FallbackValue=False}" Style="{StaticResource AppBarButtonStyleCompact}" Visibility="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" Opacity="{x:Bind AppBarButtonCopy.Visibility, Mode=OneWay, Converter={StaticResource VisibilityOpacityConverter}}">
                        <AppBarButton.OpacityTransition>
                            <ScalarTransition Duration="0:0:0.3"/>
                        </AppBarButton.OpacityTransition>
                        
                        <Grid Padding="0" Margin="0">
                            <FontIcon x:Name="FontIconCopy" Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE8C8;" FontSize="16" RenderTransformOrigin="0.5,0.5">
                                <FontIcon.RenderTransform>
                                    <CompositeTransform ScaleX="1" ScaleY="1"/>
                                </FontIcon.RenderTransform>
                            </FontIcon>
                            <FontIcon x:Name="FontIconCopyDone" Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xEC61;" FontSize="16" RenderTransformOrigin="0.5,0.5">
                                <FontIcon.RenderTransform>
                                    <CompositeTransform ScaleX="0" ScaleY="0"/>
                                </FontIcon.RenderTransform>
                            </FontIcon>
                        </Grid>
                    </AppBarButton>
                    <AppBarButton x:Name="AppBarButtonShare" x:Uid="ButtonManageShare" Command="{x:Bind ViewModel.ShareCommand}" LabelPosition="Collapsed" IsEnabled="{x:Bind ViewModel.SelectedRanges, Mode=OneWay, Converter={StaticResource NotNullBoolConverter}, FallbackValue=False}" Style="{StaticResource AppBarButtonStyleCompact}" Visibility="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" Opacity="{x:Bind AppBarButtonShare.Visibility, Mode=OneWay, Converter={StaticResource VisibilityOpacityConverter}}">
                        <AppBarButton.OpacityTransition>
                            <ScalarTransition Duration="0:0:0.3"/>
                        </AppBarButton.OpacityTransition>

                        <AppBarButton.Icon>
                            <FontIcon Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE72D;"/>
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton x:Name="AppBarButtonPrint" x:Uid="ButtonManagePrint" LabelPosition="Collapsed" IsEnabled="{x:Bind ViewModel.ScanResult, Mode=OneWay, Converter={StaticResource NotNullBoolConverter}, FallbackValue=False}" Style="{StaticResource AppBarButtonStyleCompact}" Visibility="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay, Converter={StaticResource NegativeBoolVisibilityConverter}}">
                        <AppBarButton.Icon>
                            <FontIcon Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE749;"/>
                        </AppBarButton.Icon>
                    </AppBarButton>
                    <AppBarButton x:Name="AppBarButtonPrintSelect" x:Uid="ButtonManagePrint" LabelPosition="Collapsed" IsEnabled="{x:Bind ViewModel.SelectedRanges, Mode=OneWay, Converter={StaticResource NotNullBoolConverter}, FallbackValue=False}" Style="{StaticResource AppBarButtonStyleCompact}" Visibility="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" Opacity="{x:Bind AppBarButtonShare.Visibility, Mode=OneWay, Converter={StaticResource VisibilityOpacityConverter}}">
                        <AppBarButton.OpacityTransition>
                            <ScalarTransition Duration="0:0:0.3"/>
                        </AppBarButton.OpacityTransition>
                        
                        <AppBarButton.Icon>
                            <FontIcon Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE749;"/>
                        </AppBarButton.Icon>
                    </AppBarButton>
                </StackPanel>
            </Frame>
        </Grid>

        <!-- Content -->
        <Grid Grid.Row="1">
            <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center" RelativePanel.AlignHorizontalCenterWithPanel="True" RelativePanel.AlignVerticalCenterWithPanel="True">
                <interactivity:Interaction.Behaviors>
                    <core:DataTriggerBehavior Binding="{x:Bind ViewModel.ScanResult, Mode=OneWay}" ComparisonCondition="Equal" Value="{x:Null}">
                        <core:ChangePropertyAction PropertyName="Visibility" Value="Visible"/>
                    </core:DataTriggerBehavior>
                    <core:DataTriggerBehavior Binding="{x:Bind ViewModel.ScanResult, Mode=OneWay}" ComparisonCondition="NotEqual" Value="{x:Null}">
                        <core:ChangePropertyAction PropertyName="Visibility" Value="Collapsed"/>
                    </core:DataTriggerBehavior>
                </interactivity:Interaction.Behaviors>
                
                <FontIcon Style="{StaticResource FontIconStyleSegoeFluentIcons}" Glyph="&#xE81E;" Margin="8,8,8,16" FontSize="72" Foreground="{ThemeResource SystemColorGrayTextColor}"/>
                <TextBlock x:Uid="TextManageInitialPlaceholder" Margin="8,0,8,0" Style="{ThemeResource BodyTextBlockStyle}" Foreground="{ThemeResource SystemColorGrayTextColor}"/>
            </StackPanel>

            <ScrollViewer x:Name="ScrollViewerPages" VerticalScrollBarVisibility="Auto">
                <GridView x:Name="GridViewPages" Margin="24,16,24,24" ScrollViewer.VerticalScrollMode="Disabled" ItemsSource="{x:Bind ViewModel.ScanResult.Elements, Mode=OneWay}" IsItemClickEnabled="True" SelectionMode="Single" SelectionChanged="GridViewPages_SelectionChanged">
                    <interactivity:Interaction.Behaviors>
                        <core:DataTriggerBehavior Binding="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" ComparisonCondition="Equal" Value="False">
                            <core:ChangePropertyAction PropertyName="SelectionMode" Value="Single"/>
                            <core:ChangePropertyAction PropertyName="CanReorderItems" Value="{x:Bind ViewModel.ScanResult.IsImage, Mode=OneWay, Converter={StaticResource NegativeBoolConverter}}"/>
                            <core:ChangePropertyAction PropertyName="CanDragItems" Value="{x:Bind ViewModel.ScanResult.IsImage, Mode=OneWay, Converter={StaticResource NegativeBoolConverter}}"/>
                            <core:ChangePropertyAction PropertyName="AllowDrop" Value="{x:Bind ViewModel.ScanResult.IsImage, Mode=OneWay, Converter={StaticResource NegativeBoolConverter}}"/>
                        </core:DataTriggerBehavior>
                        <core:DataTriggerBehavior Binding="{x:Bind AppBarToggleButtonSelect.IsChecked, Mode=OneWay}" ComparisonCondition="Equal" Value="True">
                            <core:ChangePropertyAction PropertyName="SelectedIndex" Value="-1"/>
                            <core:ChangePropertyAction PropertyName="SelectionMode" Value="Multiple"/>
                            <core:ChangePropertyAction PropertyName="CanReorderItems" Value="False"/>
                            <core:ChangePropertyAction PropertyName="CanDragItems" Value="False"/>
                            <core:ChangePropertyAction PropertyName="AllowDrop" Value="False"/>
                        </core:DataTriggerBehavior>
                    </interactivity:Interaction.Behaviors>

                    <GridView.ItemsPanel>
                        <ItemsPanelTemplate>
                            <ItemsWrapGrid MaximumRowsOrColumns="2" Orientation="Horizontal" SizeChanged="ItemsWrapGrid_SizeChanged"/>
                        </ItemsPanelTemplate>
                    </GridView.ItemsPanel>

                    <GridView.ItemContainerTransitions>
                        <TransitionCollection>
                            <AddDeleteThemeTransition/>
                            <ReorderThemeTransition/>
                            <EntranceThemeTransition FromHorizontalOffset="0" FromVerticalOffset="0"/>
                        </TransitionCollection>
                    </GridView.ItemContainerTransitions>

                    <GridView.ItemTemplate>
                        <DataTemplate x:DataType="scanner:ScanResultElement">
                            <GridViewItem x:Name="GridViewItemPage" Margin="4" Style="{ThemeResource DefaultGridViewItemStyle}" AutomationProperties.Name="{Binding ItemDescriptor}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                                <Grid>
                                    <!-- Selected Item Background -->
                                    <Border Background="{ThemeResource NavigationViewContentBackground}" Visibility="{Binding ElementName=GridViewItemPage, Path=IsSelected, Converter={StaticResource BoolVisibilityConverter}}"/>

                                    <Image Source="{x:Bind Thumbnail, Mode=OneWay}"/>
                                    
                                    <!-- Selected Item -->
                                    <Border BorderBrush="{ThemeResource ToolTipBorderBrush}" BorderThickness="1" Background="{ThemeResource AccentButtonBackground}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="6" CornerRadius="2" Visibility="{Binding ElementName=GridViewItemPage, Path=IsSelected, Converter={StaticResource BoolVisibilityConverter}}">
                                        <TextBlock Text="{x:Bind ItemDescriptor, Mode=OneWay}" Margin="8,3,8,6" Foreground="{ThemeResource AccentButtonForeground}" Style="{StaticResource CaptionTextBlockStyle}" TextWrapping="WrapWholeWords" MaxLines="1" TextAlignment="Center" TextTrimming="CharacterEllipsis"/>
                                    </Border>
                                    
                                    <!-- Normal Item -->
                                    <Border BorderBrush="{ThemeResource ToolTipBorderBrush}" BorderThickness="1" Background="{ThemeResource SystemControlAcrylicElementMediumHighBrush}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="6" CornerRadius="2" Visibility="{Binding ElementName=GridViewItemPage, Path=IsSelected, Converter={StaticResource NegativeBoolVisibilityConverter}}">
                                        <TextBlock Text="{x:Bind ItemDescriptor, Mode=OneWay}" Margin="8,3,8,6" Style="{StaticResource CaptionTextBlockStyle}" TextWrapping="WrapWholeWords" MaxLines="1" TextAlignment="Center" TextTrimming="CharacterEllipsis"/>
                                    </Border>
                                </Grid>
                            </GridViewItem>
                        </DataTemplate>
                    </GridView.ItemTemplate>
                </GridView>
            </ScrollViewer>
        </Grid>
    </Grid>
</Page>
